# Rootara 基因数据分析平台 - 部署选择说明
#
# 🎯 请选择适合的部署版本：
#
# 📁 docker-compose.standard.yml - 标准版本（推荐）
#   - 内存占用：约70-80MB
#   - 性能：含Redis缓存，响应速度快（提升70-90%）
#   - 适用：生产环境，内存充足的服务器（>1GB）
#   - 部署：docker-compose -f docker-compose.standard.yml up -d
#
# 📁 docker-compose.lite.yml - 轻量版本
#   - 内存占用：约30-40MB（节省50MB）
#   - 性能：内存缓存，响应稍慢但够用
#   - 适用：内存有限的服务器（<1GB），个人学习使用
#   - 部署：docker-compose -f docker-compose.lite.yml up -d
#
# 💡 如何选择：
# - 内存 > 1GB：选择 standard.yml
# - 内存 < 1GB：选择 lite.yml
# - 生产环境：推荐 standard.yml
# - 个人学习：lite.yml 即可
#
# 📖 两个版本的配置完全相同，只是Redis缓存的差异

version: '3.8'

services:
  # 前端服务 - 用户访问界面
  frontend:
    image: ghcr.io/pzweuj/rootara:latest
    container_name: rootara-frontend
    ports:
      - "3000:3000"                                              # 🔧 可修改端口：如需改为其他端口，修改前面的数字
    environment:
      # 🔧 管理员账号配置 - 建议修改
      - ADMIN_EMAIL=admin@rootara.app                            # 🔧 管理员邮箱
      - ADMIN_PASSWORD=rootara123                                # 🔧 管理员密码

      # 🔧 安全配置 - 建议修改
      - JWT_SECRET=rootara_jwt_secret                            # 🔧 JWT密钥，建议修改为随机字符串
      - ROOTARA_BACKEND_API_KEY=rootara_api_key_default_001      # 🔧 API密钥，需与后端保持一致

      # 默认配置（通常无需修改）
      - TZ=Asia/Shanghai
      - ROOTARA_BACKEND_URL=http://backend:8000
      - NODE_ENV=production
      - NEXT_TELEMETRY_DISABLED=1
    depends_on:
      backend:
        condition: service_healthy
    restart: unless-stopped

  # 后端服务 - API接口
  backend:
    image: ghcr.io/pzweuj/rootara-backend:latest
    container_name: rootara-backend
    command: /bin/bash /app/init.sh
    volumes:
      - ./data:/data                                             # 数据存储目录
      - ./logs:/app/logs                                         # 日志存储目录
    environment:
      # 🔧 API密钥配置 - 需与前端保持一致
      - ROOTARA_API_KEY=rootara_api_key_default_001              # 🔧 API密钥，需与前端保持一致

      # 默认配置（通常无需修改）
      - TZ=Asia/Shanghai
      - LOG_LEVEL=INFO
      - LOG_CONSOLE=true
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_TTL=3600
      - DB_PATH=/data/rootara.db
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  # Redis缓存服务 - 提升性能（默认配置即可）
  redis:
    image: redis:7.4-alpine
    container_name: rootara-redis
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    restart: unless-stopped

volumes:
  redis_data:
    driver: local

networks:
  default:
    name: rootara

# 🔧 常用命令：
# 标准模式启动：docker-compose up -d
# 轻量模式启动：docker-compose -f docker-compose.yml -f docker-compose.lite.yml up -d
# 停止：docker-compose down
# 查看日志：docker-compose logs -f
# 重启：docker-compose restart
#
# 💡 模式选择建议：
# - 内存 > 1GB：选择标准模式（更快的响应速度）
# - 内存 < 1GB：选择轻量模式（更低的资源占用）
# - 生产环境：推荐标准模式
# - 个人学习：轻量模式即可
#
# 📖 高级配置（可选）：
# - Redis内存调整：修改 redis 服务的 --maxmemory 参数
# - 缓存时间调整：修改 backend 服务的 CACHE_TTL 环境变量
# - Redis密码保护：在 redis 命令中添加 --requirepass 参数
