# coding=utf-8
# pzw
# 20250121
# vcf转为rootara格式

import sys
import argparse
import gzip
from datetime import datetime

def vcf_to_rootara(input_vcf, output_file):
    """
    将VCF文件转换为类似23andme格式
    :param input_vcf: 输入的VCF文件路径
    :param output_file: 输出的文件路径
    """
    # 打开输入文件
    open_func = gzip.open if input_vcf.endswith('.gz') else open
    mode = 'rt' if input_vcf.endswith('.gz') else 'r'

    now = datetime.now().astimezone().strftime('%Y-%m-%d %H:%M:%S')
    with open_func(input_vcf, mode) as f, open(output_file, 'w') as out:
        
        # 写入文件头
        out.write(f"# This data file generated by Rootara at {now}\n")
        out.write("#\n")
        out.write("# Below is a text version of your data. Fields are TAB-separated.\n")
        out.write("# Each line corresponds to a single SNP.\n")
        out.write("# D for del. I for ins. - for missing.\n")
        out.write("# Reference Genome: GRCh37\n")
        out.write("# For more information, see https://github.com/pzweuj/rootara\n")
        out.write("# rsid\tchromosome\tposition\tgenotype\n")
        
        # 解析VCF文件
        n = 0
        m = 0
        for line in f:
            # 跳过注释行
            if line.startswith('#'):
                continue

            n += 1
                
            # 解析VCF行
            fields = line.strip().split('\t')
            chrom = fields[0]
            pos = fields[1]
            rsid = fields[2]
            ref = fields[3]
            alt = fields[4]
            info = fields[7]
            format_fields = fields[8].split(':')  # 获取FORMAT字段
            sample_fields = fields[9].split(':')  # 获取样本字段

            gt_index = format_fields.index('GT') if 'GT' in format_fields else -1
            genotype = sample_fields[gt_index] if gt_index != -1 else '.'

            # 尝试从INFO
            info_dict = {k: v for k, v in (item.split("=", 1) for item in info.split(";") if "=" in item)}
            rsid = info_dict.get("RSID", rsid)

            # 如果没有rsid
            if rsid == "." or rsid == "":
                rsid = "rti_" + chrom + "_" + pos + ref + alt
            
            # 处理插入和缺失
            if len(ref) > len(alt):
                ref = "I"
                alt = 'D'  # 缺失
            elif len(ref) < len(alt):
                ref = "D"
                alt = 'I'  # 插入
            
            if ref == "-":
                ref = "D"
                alt = "I"
            elif alt == "-":
                ref = "I"
                alt = "D"

            # reference调整
            if len(ref) > 1:
                ref = ref[0]

            # 处理染色体格式
            if chrom.startswith('chr'):
                chrom = chrom[3:]
                
            # 处理基因型格式
            genotype = genotype.replace('|', '/')
            if genotype == '0/0':
                genotype = ref + ref
            elif genotype == '0/1':
                genotype = ref + alt
            elif genotype == '1/1':
                genotype = alt + alt
            elif genotype == "0":
                if chrom in ["X", "Y", "MT"]:
                    genotype = ref
                else:
                    genotype = '--'  # 空值改为-
            elif genotype == "1":
                if chrom in ["X", "Y", "MT"]:
                    genotype = alt
                else:
                    genotype = '--'
            else:
                genotype = '--'  # 空值改为-

            # 写入输出文件
            m += 1
            out.write(f"{rsid}\t{chrom}\t{pos}\t{genotype}\n")
    
        print("[Done] efficiency: ", "%.2f" % (m / n * 100) + "%")

def vcf2RootaraMain():
    parser = argparse.ArgumentParser(
        usage = "python3 vcf_2_rootara.py -i <vcf file> -o <other file>",
        formatter_class=argparse.RawTextHelpFormatter
    )
    parser.add_argument("-i", "--input", type=str, help="vcf format")
    parser.add_argument("-o", "--output", type=str, help="rootara format")

    if len(sys.argv[1:]) == 0:
        parser.print_help()
        parser.exit()
    
    args = parser.parse_args()
    input = args.input
    output = args.output
    vcf_to_rootara(input, output)

if __name__ == "__main__":
    vcf2RootaraMain()

# end
